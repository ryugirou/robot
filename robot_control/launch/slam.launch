<?xml version="1.0" encoding="UTF-8"?>
<launch>
  <arg name="sim" default="false"/>

  <arg name="manager_name" default="nodelet_manager" />
  <arg name="nodelet_mode" default="standalone" /><!-- set to standalone if you want to use as node-->

  <!-- robot configuration -->
  <arg name="robot_name" value="omni4"/>
  <arg name="wheel_radius" value="0.1"/>	<!-- m -->
  <arg name="robot_radius" value="0.25" />	<!-- m  center to wheel-->
  <arg name="mass" value="10"/>	<!-- kg -->
  <arg name="motor_torque" value="8.0"/>	<!-- N*m MTQ-->
  <arg name="motor_acc" value="$(eval motor_torque * 2 / (mass * wheel_radius))"/>	<!-- rad/s^2 -->
  <arg name="motor_vel" value="100"/>	<!-- rad/s -->
  <arg name="x0" value="0.5"/>
  <arg name="y0" value="0.5"/>
  <arg name="yaw0" value="0"/>
  <arg name="R_lin" value="0.9"/>
  <arg name="R_ang" value="0.08"/>

  <arg name="lin_acc" value="$(eval wheel_radius * motor_acc * R_lin)"/>
  <arg name="ang_acc" value="$(eval wheel_radius * motor_acc * R_ang / robot_radius)"/>
  <arg name="lin_vel" value="$(eval wheel_radius * motor_vel * R_lin)"/>
  <arg name="ang_vel" value="$(eval wheel_radius * motor_vel * R_ang / robot_radius)"/>

  <!-- launch RobotHW or RobotHWSim depending on argument sim -->
  <include file="$(eval find('robot_control') + '/launch/RobotHWSim.launch' if sim==1 else find('robot_control') + '/launch/RobotHW.launch' )">
    <arg name="manager_name" value="$(arg manager_name)" />
    <arg name="nodelet_mode" value="$(arg nodelet_mode)" />
    <arg name="robot_name" value="$(arg robot_name)"/>
    <arg name="wheel_radius" value="$(arg wheel_radius)"/>
    <arg name="robot_radius" value="$(arg robot_radius)"/>
    <arg name="motor_acc" value="$(arg motor_acc)"/>
    <arg name="motor_vel" value="$(arg motor_vel)"/>
    <arg name="x0" value="$(arg x0)"/>
    <arg name="y0" value="$(arg y0)"/>
    <arg name="yaw0" value="$(arg yaw0)"/>
  </include>
  
  <group ns="$(arg robot_name)">
    <arg name="model" default="$(find robot_description)/urdf/$(arg robot_name)/model.urdf"/>   
	  <param name="robot_description" command="$(find xacro)/xacro $(arg model) 
      mass:=$(arg mass)
    --inorder"/>

    <!-- convert joint states to TF transforms for rviz, etc -->
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="false" output="screen">
      <param name="tf_prefix" value="$(arg robot_name)"/>
      <remap from="/joint_states" to="joint_states" />
    </node>

    <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" />

	  <node name="joy_node" pkg="joy" type="joy_node" />    

    <!-- joy teleop -->
    <node pkg="robot_control" type="base_teleop_joy" name="base_teleop_joy" output="screen">
      <rosparam file="$(find robot_control)/config/joy/ds4.yaml" command="load" />
      <param name="max_lin" value="$(arg lin_vel)" />
      <param name="max_ang" value="$(arg ang_vel)" />
      <param name="publish_vel" value="true" />
      <remap from="cmd" to="beta/cmd" />
    </node>

    <!-- gmapping -->
    <node pkg="gmapping" type="slam_gmapping" name="slam_gmapping">
      <rosparam command="load" file="$(find robot_control)/config/gmapping.yaml" />
      <param name="base_frame" value="$(arg robot_name)/odom_link" />
      <param name="odom_frame" value="$(arg robot_name)/odom" />
      <param name="map_frame"  value="$(arg robot_name)/map" />
    </node>

  </group>

</launch>
