<?xml version="1.0" encoding="UTF-8"?>
<launch>
  <arg name="manager_name" default="nodelet_manager" />
  <arg name="nodelet_mode" default="standalone" /><!-- set to standalone if you want to use as node-->
  <arg name="debug" default="true"/>
  <arg name="robot_name" default="omni4"/>
  <arg name="sim" default="false"/>

  <include file="$(eval find(robot_name) + '/launch/RobotHW.launch' )">
    <arg name="manager_name" value="$(arg manager_name)" />
    <arg name="nodelet_mode" value="$(arg nodelet_mode)" />
    <arg name="robot_name" value="$(arg robot_name)"/>
  </include>
  

  <group ns="$(arg robot_name)">
    <!-- <arg name="model" default="$(find robot_description)/urdf/$(arg robot_name)/model.urdf"/>   
	  <param name="robot_description" command="$(find xacro)/xacro $(arg model) 
      mass:=$(arg mass)"/> -->

    <!-- convert joint states to TF transforms for rviz, etc -->
    <!-- <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="false" output="screen" machine="robot">
      <param name="tf_prefix" value="$(arg robot_name)"/>
      <remap from="/joint_states" to="joint_states" />
    </node>

    <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" machine="robot"/> -->

	  <!-- <node name="joy_node" pkg="joy" type="joy_node" machine="robot"/>  -->

    <node pkg="ds4_driver" type="ds4_driver_node.py" name="ds4_driver" output="screen" machine="robot">
      <rosparam command="load" file="$(find ds4_driver)/config/params.yaml" />
      <param name="device_addr" value="" />
      <param name="use_standard_msgs" value="true" />
    </node>


    <node pkg="map_server" type="map_server" name="map_server" args="$(find robot_control)/resources/red/map.yaml">
      <param name="frame_id" value="$(arg robot_name)/map"/>
    </node>

    <node pkg="amcl" type="amcl" name="amcl" output="screen">
      <rosparam command="load" file="$(find robot_control)/config/amcl.yaml" />
      <param name="base_frame_id" value="$(arg robot_name)/odom_link" />
      <param name="odom_frame_id" value="$(arg robot_name)/odom" />
      <param name="global_frame_id" value="$(arg robot_name)/map" />
      <param name="initial_pose_x" value="1.0" />
      <param name="initial_pose_y" value="1.0" />
      <param name="initial_pose_a" value="0" />
    </node>

    <node pkg="move_base" type="move_base" respawn="false" name="move_base" output="screen">
      <rosparam file="$(find robot_control)/config/move_base/dwa_local_planner_params.yaml" command="load" ns="DWAPlannerROS" />
      <rosparam file="$(find robot_control)/config/move_base/costmap_common_params.yaml" command="load" ns="global_costmap" />
      <rosparam file="$(find robot_control)/config/move_base/costmap_common_params.yaml" command="load" ns="local_costmap" />
      <rosparam file="$(find robot_control)/config/move_base/local_costmap_params.yaml" command="load" />
      <rosparam file="$(find robot_control)/config/move_base/global_costmap_params.yaml" command="load" />

      <param name="global_costmap/laser_scan_sensor/sensor_frame" value="$(arg robot_name)/laser_link" />
      <param name="global_costmap/laser_scan_sensor/topic" value="scan" />
      <param name="global_costmap/global_frame" value="$(arg robot_name)/map" />
      <param name="global_costmap/robot_base_frame" value="$(arg robot_name)/base_link" />

      <param name="local_costmap/laser_scan_sensor/sensor_frame" value="$(arg robot_name)/laser_link" />
      <param name="local_costmap/laser_scan_sensor/topic" value="scan" />
      <param name="local_costmap/global_frame" value="$(arg robot_name)/odom" />
      <param name="local_costmap/robot_base_frame" value="$(arg robot_name)/base_link" />

      <!-- <remap from="odom" to="odom_twist"/> -->

      <param name="base_local_planner" value="dwa_local_planner/DWAPlannerROS" />
     </node>
  </group>


  <!-- Debug -->
  <group if="$(arg debug)">
    <include file="$(find robot_control)/launch/debug.launch">
      <arg name="robot_name" value="$(arg robot_name)"/>
    </include>
  </group>
 
</launch>